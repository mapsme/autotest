library 'test-utils'

import hudson.tasks.test.AbstractTestResultAction;
import groovy.json.JsonOutput

node('naboo') {

    stage('git') {
        deleteDir()
        withCredentials([sshUserPrivateKey(credentialsId: 'ssh-keniya', keyFileVariable: '~/.ssh/id_rsa.pub', passphraseVariable: '', usernameVariable: '')]) {
            sh "git clone -b ${git_branch} ssh://git@bitbucket.mail.ru:2222/mauto/general-ui-autotests.git"
        }
    }

    stage('copy artifacts') {
        def upstreamCause
        try{
            upstreamCause = currentBuild.rawBuild.getCause(hudson.model.Cause$UpstreamCause)
            if (upstreamCause != null) {
                upstreamCause = null
                echo "Get artifacts from upstream build"
                copyArtifacts flatten: true, filter: '*/**/*.ipa', target: 'general-ui-autotests', fingerprintArtifacts: true, projectName: 'iOS', selector: upstream(fallbackToLastSuccessful: true)
            }
            else {
                echo "Upstream cause is null"
                if (build_number == null || build_number == ""){
                    echo "Build number is null"
                    copyArtifacts flatten: true, filter: '*/**/*.ipa', target: 'general-ui-autotests', fingerprintArtifacts: true, projectName: 'iOS'
                }
                else {
                    echo "Build number is ${build_number}"
                    if (build_number != "beta" && build_number != "debug" && build_number != "release")
                    copyArtifacts flatten: true, filter: '*/**/*.ipa', target: 'general-ui-autotests', fingerprintArtifacts: true, projectName: 'iOS', selector: specific(build_number)
                }
            }
            upstreamCause = null
        } catch (Exception e) {
            echo e.toString()
            upstreamCause = null
            currentBuild.result = 'ABORTED'
            error('No apk found, aborting build...')
        }
        copyArtifacts fingerprintArtifacts: true, target: 'general-ui-autotests', flatten: true, projectName: 'mapsme-appium'
    }

    stage('run tests') {
        timestamps {
            dir('general-ui-autotests') {
                def device = DEVICE_NAME
                def apk = build_number
                def causer = JsonOutput.toJson(["\"name\"":"\"\"","\"build_number\"": "\"\"",
                                "\"url\"":"\"\"","\"started_by\"":"\"build_check\"",
                                "\"jenkins_job\"":"\"${env['BUILD_URL']}\"",
                                "\"release\"":"\"\"","\"release_type\"":"\"${build_number}\""])

                if (build_number != "beta" && build_number != "debug" && build_number != "release"){
                    apk = sh returnStdout: true, script: 'echo `find *.ipa`'
                    apk = apk.trim().split("\n")[0]
                    causer = getCauser(apk, false)
                }
                try {
                    isDeviceBusy(device)
                    def pytest_start = "pytest \$WORKSPACE/mapsme --rootdir \$WORKSPACE/mapsme --html=report.html --junitxml=report.xml --log-cli-level=INFO "
                    def conf = ["--device-id": device,
                            "--apk-name": apk,
                            "--build-number": currentBuild.number,
                            "--session-info": "\"${causer}\"",
                            "--report-host": REPORT_SERVER,
                            "--clean-device": clean_device
                            ]
                    if (mark == null || mark == '') {
                        conf["-k"] = "\'${TEST_ITEMS}\'"
                    }
                    def str = conf.collect{ return  " ${it.key}=${it.value}"}.join("")

                    if (new Boolean(EXCLUDE_WEBVIEW)) {
                        str = str + " --skip-webview"
                    }

                    if (mark != null && mark != '') {
                        str = str + " -m ${mark}"
                    }

                    pytest_start = pytest_start + str

                    sh """#!/bin/bash
                    export WORKSPACE=`pwd`

                    python3 -m venv ./autotest
                    source ./autotest/bin/activate

                    pip3 install -r requirements.txt
                    whl=`find *.whl`
                    echo \$whl
                    pip3 install \$WORKSPACE/\$whl
                    ${pytest_start}

                """
                } catch(Exception e) {
                    echo e.toString()
                }
            }
        }
    }

    stage("rerun") {
        if (env['JOB_NAME'].contains("buildcheck")) {
            junit allowEmptyResults: true, testResults: 'general-ui-autotests/report.xml'
            def result = currentBuild.rawBuild.getAction(hudson.tasks.junit.TestResultAction.class).result
            def total = result.getTotalCount()
            def failed = result.getFailCount()
            def skipped = result.getSkipCount()
            def passed = total - failed - skipped
            if (passed == 0) {
                timestamps {
                    dir('general-ui-autotests') {
                        def device = DEVICE_NAME
                        build job: 'at-infrastructure/kill-appium-session', parameters: [string(name: 'device_id', value: device),
                                                                             string(name: 'node', value: 'autotest')],
                                                                wait: false

                        def apk = build_number
                        def causer = JsonOutput.toJson(["\"name\"":"\"\"","\"build_number\"": "\"\"",
                                        "\"url\"":"\"\"","\"started_by\"":"\"build_check\"",
                                        "\"jenkins_job\"":"\"${env['BUILD_URL']}\"",
                                        "\"release\"":"\"\"","\"release_type\"":"\"${build_number}\""])

                        if (build_number != "beta" && build_number != "debug" && build_number != "release"){
                            apk = sh returnStdout: true, script: 'echo `find *.ipa`'
                            apk = apk.trim().split("\n")[0]
                            causer = getCauser(apk, false)
                        }
                        try {
                            isDeviceBusy(device)
                            def pytest_start = "pytest \$WORKSPACE/mapsme --rootdir \$WORKSPACE/mapsme --html=report.html --junitxml=report.xml --log-cli-level=INFO "
                            def conf = ["--device-id": device,
                                    "--apk-name": apk,
                                    "--build-number": currentBuild.number,
                                    "--session-info": "\"${causer}\"",
                                    "--report-host": REPORT_SERVER,
                                    "--clean-device": clean_device
                                    ]
                            if (mark == null || mark == '') {
                                conf["-k"] = "\'${TEST_ITEMS}\'"
                            }
                            def str = conf.collect{ return  " ${it.key}=${it.value}"}.join("")

                            if (new Boolean(EXCLUDE_WEBVIEW)) {
                                str = str + " --skip-webview"
                            }

                            if (mark != null && mark != '') {
                                str = str + " -m ${mark}"
                            }

                            pytest_start = pytest_start + str

                            sh """#!/bin/bash
                            export WORKSPACE=`pwd`

                            python3 -m venv ./autotest
                            source ./autotest/bin/activate

                            pip3 install -r requirements.txt
                            whl=`find *.whl`
                            echo \$whl
                            pip3 install \$WORKSPACE/\$whl
                            ${pytest_start}

                        """
                        } catch(Exception e) {
                            echo e.toString()
                        }
                    }
                }
            }
            currentBuild.rawBuild.getAction(hudson.tasks.junit.TestResultAction.class).setResult(new hudson.tasks.junit.TestResult(), hudson.model.TaskListener.NULL)
        }
    }


    stage('report') {
        archiveArtifacts allowEmptyArchive: true, artifacts: 'general-ui-autotests/report.html,general-ui-autotests/report.xml,general-ui-autotests/*.png,general-ui-autotests/*.json'
        junit allowEmptyResults: true, testResults: 'general-ui-autotests/report.xml'
        publishHTML([allowMissing: true, alwaysLinkToLastBuild: true, keepAll: true, reportDir: '',
                     reportFiles: 'general-ui-autotests/report.html', reportName: 'Appium test report',
                     reportTitles: 'Appium test report'])
    }

    stage('sendmail') {
        def result = currentBuild.rawBuild.getAction(hudson.tasks.junit.TestResultAction.class).result
        def total = result.getTotalCount()
        def failed = result.getFailCount()
        def skipped = result.getSkipCount()
        def passed = total - failed - skipped
        def body = "Tests result <br> Total: ${total}, Passed: ${passed}, Failed: ${failed}, Skipped: ${skipped}"
        emailext mimeType: 'text/html', body: body, subject: "Test result ${env['JOB_NAME']} #${currentBuild.number}",
                 to: 'k.kravchuk@mapswithme.com'
    }
}